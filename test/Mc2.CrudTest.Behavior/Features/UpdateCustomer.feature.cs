// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Mc2.CrudTest.Behavior.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UpdateCustomerFeature : object, Xunit.IClassFixture<UpdateCustomerFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UpdateCustomer.feature"
#line hidden
        
        public UpdateCustomerFeature(UpdateCustomerFeature.FixtureData fixtureData, Mc2_CrudTest_Behavior_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "UpdateCustomer", "\t  As a user\n  I want to update a customer\n  So that I can keep my customer list " +
                    "up to date", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update a customer")]
        [Xunit.TraitAttribute("FeatureTitle", "UpdateCustomer")]
        [Xunit.TraitAttribute("Description", "Update a customer")]
        [Xunit.TraitAttribute("Category", "updateCustomer")]
        public void UpdateACustomer()
        {
            string[] tagsOfScenario = new string[] {
                    "updateCustomer"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a customer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table2.AddRow(new string[] {
                            "C469FB46-01B8-4B8F-8E7D-CEF3AFD14A59",
                            "John",
                            "Doe",
                            "johnDoe@gmail.com",
                            "09107602786",
                            "1234567890",
                            "01-03-1993"});
#line 8
 testRunner.Given("I have a customer with the following attributes:", ((string)(null)), table2, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table3.AddRow(new string[] {
                            "C469FB46-01B8-4B8F-8E7D-CEF3AFD14A59",
                            "nima",
                            "nosrati",
                            "johnDoe@gmail.com",
                            "09107602786",
                            "1234567890",
                            "01-03-1993"});
#line 12
    testRunner.When("I update the customer with the following attributes:", ((string)(null)), table3, "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FirstName",
                            "LastName",
                            "Email",
                            "PhoneNumber",
                            "BankAccountNumber",
                            "DateOfBirth"});
                table4.AddRow(new string[] {
                            "C469FB46-01B8-4B8F-8E7D-CEF3AFD14A59",
                            "nima",
                            "nosrati",
                            "johnDoe@gmail.com",
                            "09107602786",
                            "1234567890",
                            "01-03-1993"});
#line 16
    testRunner.Then("the customer should be updated with the following attributes:", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UpdateCustomerFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UpdateCustomerFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
